name: speak
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to build'
        required: true
        default: 'main'
      tag_version:
        description: 'The short version'
        required: true
        default: '0.0.1'

env:
  APP_NAME: speak

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
            executable_extension: ''
          - os: 'windows-latest'
            label: 'windows'
            executable_extension: '.exe'
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |-

          sudo ls -lR /etc/apt/
          cat > /tmp/sources.list << EOF
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-security main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-updates main multiverse universe restricted
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu jammy-backports main multiverse universe restricted
          
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy main multiverse universe restricted
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy-security main multiverse universe restricted
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy-updates main multiverse universe restricted
          deb [arch-=amd64,i386] http://ports.ubuntu.com/ubuntu-ports jammy-backports main multiverse universe restricted
          EOF
          sudo mv /etc/apt/sources.list /etc/apt/sources.list.default
          sudo mv /tmp/sources.list /etc/apt/sources.list

          sudo dpkg --add-architecture i386 

          sudo apt update

          sudo apt install -y \
            gcc-multilib \
            g++-multilib

          sudo apt-get install gcc-i686-linux-gnu

          sudo apt install -y \
            libwebkit2gtk-4.0-dev:i386 \
            libssl-dev:i386 \
            libgtk-3-dev:i386 \
            librsvg2-dev:i386

          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            libssl-dev \
            libgtk-3-dev \
            librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app for linux
        if: matrix.os == 'ubuntu-latest'
        run: |-
        
          rustup target add x86_64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu

          export TAURI_PRIVATE_KEY=${{ secrets.TAURI_PRIVATE_KEY }}
          export TAURI_KEY_PASSWORD=${{ secrets.TAURI_KEY_PASSWORD }}

          npm run tauri build -- --target x86_64-unknown-linux-gnu

          export RUSTFLAGS="-C linker=i686-linux-gnu-gcc"
          export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig/
          export PKG_CONFIG_SYSROOT_DIR=/usr/lib/i386-linux-gnu

          npm run tauri build -- --target i686-unknown-linux-gnu

      - name: Build the app for windows
        if: matrix.os == 'windows-latest'
        run: |-
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc

          $env:TAURI_PRIVATE_KEY='${{ secrets.TAURI_PRIVATE_KEY }}'
          $env:TAURI_KEY_PASSWORD='${{ secrets.TAURI_KEY_PASSWORD }}'

          npm run tauri build -- --target x86_64-pc-windows-msvc
          npm run tauri build -- --target i686-pc-windows-msvc

      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest'
        run: |
          # for 64-bit binary
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_amd64.deb ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64.deb
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_amd64.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64.AppImage
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_amd64.AppImage.tar.gz ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64.AppImage.tar.gz
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_amd64.AppImage.tar.gz.sig ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_amd64.AppImage.tar.gz.sig
          
          # for 32-bit binary
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_i386.deb ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386.deb
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_i386.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386.AppImage
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_i386.AppImage.tar.gz ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386.AppImage.tar.gz
          mv src-tauri/target/i686-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_i386.AppImage.tar.gz.sig ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_i386.AppImage.tar.gz.sig

      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'windows-latest'
        run: |
          # for 64-bit binary
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x64_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64.msi
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x64_en-US.msi.zip ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64.msi.zip
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x64_en-US.msi.zip.sig ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x64.msi.zip.sig

          # for 32-bit binary
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x86_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x86.msi
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x86_en-US.msi.zip ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x86.msi.zip
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{ github.event.inputs.tag_version }}_x86_en-US.msi.zip.sig ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}_x86.msi.zip.sig
        
      - name: Display structure of build files
        run: |
          ls -l .
          
      - name: 'Publish binary to release'
        continue-on-error: true
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_version }}
          file: ${{env.APP_NAME}}-${{matrix.label}}-${{ github.event.inputs.tag_version }}*,release.json
          tags: true
          draft: false
          overwrite: true
